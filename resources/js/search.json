[[{"l":"Welcome to Baselime","p":["Baselime is an Observability as Code platform based on OpenTelemetry that makes it easy for your team to resolve incidents and performance bottlenecks in your serverless applications.","Baselime currently supports serverless services on AWS."]},{"l":"Observability as Code","p":["Typically, monitoring and observability solutions let you define your configurations in web-based user interfaces.","Baselime empowers you to write your observability configurations in human-readable declarative configuration files, alongside your application code. This lets you create a blueprint that you can version, share and re-use. Observability becomes a first-class citizen of your software development process.","The primary interface to interact with Baselime is the Baselime CLI."]},{"i":"events-logs-metrics-and-traces","l":"Events, Logs, Metrics and Traces","p":["Serverless runtimes and infrastructures emit telemetry data in various formats. These are usually the missing context when debugging defects and incidents. Baselime doesn't re-invent the wheel. Data is gathered in your serverless application from:","Direct Connectors with AWS services through CloudFormation","OpenTelemetry to capture runtime traces","Logs and Metrics from CloudWatch","An Events API which empowers you to send events directly through HTTP"]},{"l":"Baselime Data Storage","p":["Baselime securely stores your telemetry data per namespace. A namespace is typically a Lambda function. Namespaces help partition your data and facilitate querying your data."]},{"i":"queries-alerts-and-dashboard","l":"Queries, Alerts and Dashboard","p":["Query your data, using any of the Baselime clients, to get a deeper understanding of your production systems. Create and share alerts and dashboard based on the results of your queries."]},{"l":"Collaboration","p":["Baselime is built for teams. Collaborate with your team on the findings and learnings from your queries and dashboards."]},{"l":"Made for Developers","p":["Monitoring and observability platforms are usually built with operations professionals as primary users; Baselime puts the developer at the center of the observability efforts of your teams. Baselime shifts left observability in your developement lifecycles."]}],[{"l":"Quick Start","p":["Getting started with Baselime and starting discovering the benefits of Observability as Code (OaC) takes less than 5 minutes.","All you need is:","An AWS Account","The AWS CLI","Permissions to deploy a CloudFormation stack with IAM role.","A deployed application leveraging AWS Lambda and other AWS serverless services","If you do not have a deployed application, you can use one of our example applications."]},{"i":"step-1-sign-up-for-baselime","l":"Step 1: Sign up for Baselime","p":["Baselime has a free usage tier.","Signup on the Baselime console.","Follow the onboarding process:","Create a workspace. Typically this will be the name of your organisation.","Connect your AWS Account"]},{"i":"step-2-connect-your-aws-account","l":"Step 2: Connect your AWS Account","p":["In order to ingest data from your serverless systems, Baselime needs to connect to your AWS account. This is done by deploying a CloudFormation template onto your AWS account.","The CloudFormation template will:","Create a role with read-only access to your account, plus permission to create a Lambda Function and add permissions to it","An S3 Bucket, to store CloudTrail data","An SNS Topic, used to signal new data in the aforementioned S3 Bucket","A CloudTrail Trail, used to register changes to your serverless architecture","We've open-sourced the CloudFormation template here.","You can generate and download this template through the Baselime Console.","Once you've generated and downloaded the template, you must deploy it to your AWS Account. Baselime automatically opens a new tab in your default browser with the link to deploy the downloaded CloudFormation template. Simply follow the step in CloudFormation without changing any of the provided values to deploy the stack on your AWS account.","Please make sure you're using the correct credentials to deploy to the correct account and the correct region.","Telemetry data (in the form of logs and metrics) should now be automatically ingested from your AWS account to Baselime and should be available through our various clients. Structured logs sent to stdout or stderr from your Lambda functions will be sent to Baselime as events.","Send a request to or invoke any deployed AWS Lambda function in your account and you should see data from it in the Baselime console within seconds. Moreover, you can stream all the events ingeste in Baselime directly in your terminal.","If you do not complete any of the above steps, Baselime will not be able to ingest data from your AWS account.","If you do not see any data in the Baselime UI or using the stream command within seconds of completing the above steps, something went wrong. Please contact us."]},{"i":"step-3-install-the-baselime-cli","l":"Step 3: Install the Baselime CLI"},{"i":"step-4-log-in-the-baselime-cli","l":"Step 4: Log in the Baselime CLI","p":["After creating an account, you should log in the Baselime CLI."]},{"i":"step-5-deploy-your-observability","l":"Step 5: Deploy your observability","p":["The power of Baselime is in its Observability as Code (OaC) capabilities. Baselime empowers you and your team to manage observability resources as code.","In the root of your project folder, initialise a new Baselime config folder.","The Baselime CLI will initialise your working directory with a .baselime folder. It will automatically add sample observability resources (queries, alerts and alert channels) based on the template you selected in the previous command. This would help getting you started.","Don't hesitate to tweak the query and the alert. The complete set of parameters for the .baselime folder can be found in the Observability as Code section.","Validate your .baselime configuration folder","Apply the changes to the .baselime folder to Baselime","To run a query in your command line:","This will output the results of the query in the command line, with a link that will redirect to the results in the web console."]},{"l":"Next Steps","p":["Now you can setup our Observability as Code (OaC). Next up is to send more telemetry data to Baselime."]}],[{"l":"Baselime Concepts","p":["When adopting serverless architectures, there's usually and explosion in operational complexity. Highly distributed microservices leveraging serverless functions, databases, event buses, and event queues make it extremely difficult to track and understand how the systems are behaving and how defects and incidents occur.","The goal of Baselime is to empower you and your teams to:","Stay ahead of bugs and defects with the powers of Observability as Code","Solve issues before they impact actual users and customers","Deeply understand how your production systems are behaving","Improve collaboration within and across teams on production systems"]},{"l":"Observability as Code","p":["Observability as Code adapts the principles of Infrastructure as Code to observability configurations. Dashboards, queries, alerts and everything else are configured and automated through Continuous Deployment pipelines, are source-controlled, and are repeatable across teams and environments.","Baselime helps your team adopt the best practices from software engineering to collaborate and iterate on observability configurations. By shifting left observability in your software developement lifecycles, write your observability configuration simultaneously with your application code, making them a first-class citizen of your codebase, rather than a post-deployment after-thougt."]},{"l":"Telemetry Data","p":["Once you sign-up to Baselime and connect your AWS account, Baselime starts to automatically collect logs, metrics and various other data types from your serverless applications.","Baselime ingests those events from your applications and empowers you to interact with them through its various clients in near-real-time.","Once the telemetry data is ingested, you can run complex queries on your data, filtering across any dimension or formula, grouping and aggregating as you please. This lets you to interrogate your systems at a fine level and isolate a single user, a single service or a single transaction; or query across multiple dimensions to get a higher level overview."]},{"l":"Datasets","p":["Your telemetry data is organised in datasets in Baselime. A dataset is collection of similar or related events events."]},{"l":"Namespaces","p":["Namespaces are additional dimensions to further organise your data such that you can slice and dice when running queries. A typical namespace would be the name of the serverless function emitting the telemetry data."]},{"l":"Applications","p":["Distributed systems are complex and it is necessary to define virtual boundaries between sub-systems to make sense of the whole architecture. A typical distributed system has multiple services, storage layers, gateways, etc... with names that are constantly changing.","An application in Baselime is a group of services that work together to accomplish a goal. For example, a payment service would be considered an application. Although it communicates with other services in the architecture, it usually encapsulates multiple compute, storage, event propagation and gateway resources, all working towards the goal of helping customers successfully purchase goods and services.","Typically, an application would be a repo or a sub-folder if using a monorepo flow.","Grouping cloud resources by application lets you and your team filter, query, visualise and get alert on telemetry data specific to the application, rather than accros the entire stack."]}],[{"i":"queries-alerts-and-dashboards","l":"Queries, Alerts and Dashboards","p":["This section is a quick start on how to define Queries, Alerts and Dashboards with the Baselime CLI.","Baselime is based on Observability as Code: defining your observability configurations as code, rather than point-and-click web UIs. Baselime entire platform is driven by YAML files that you can track in your version control.","Create a .baselime folder in the root of your project folder, and use it to define queries, alerts and dashboards.","You can use the CLI to apply your observability configurations."]},{"l":"Queries","p":["You can create queries using any YAML file in the .baselime folder."]},{"l":"Channels","p":["You can create channels that are destinations where Baselime can send messages. For instances, messages when an alert is trigerred."]},{"l":"Alerts","p":["You can create an alert based on queries. You can reference the query and the channels with the !ref function.","For instance, this alert will check the results of a query lambda-duration on a 5 minutes frequency, querying data for the past 5 minutes, and if the result of the query exceed a threshold, it will send a message to the channels specified."]},{"l":"Charts","p":["Baselime empowers you to create dynamic charts to display the results of queries."]},{"l":"Dashboards","p":["A dashboard is a collection of charts that can be used to monitor the health of an sub-set of an application."]}],[{"l":"Sending Data to Baselime","p":["Baselime ingests your telemetry data and allows you to observe your production environments.","You can send your telemetry data to Baselime with either of: Automatic CloudWatch logs Events API Automatic CloudTrail events Auto-instrumentation with OpenTelemetry (Coming Soon)"]},{"l":"Validation","p":["Events sent to Baselime should not exceed 32kb in raw, uncompressed size per event. Events exceeding this limit will not be ingested and will be dropped."]},{"l":"Semi-structured logs","p":["It is recommended to send events to Baselime in structure JSON format. However, we understand that not every team has made their way through OpenTelemetry or structure logging yet. As such, we support semi-structured logs, such that you and your team can run complex queries on data that hasn't been formatted as per current industry standards.","Baselime automatically detects log events that contain JSON data, but is prepended or appended by a generic string.","The generic string will be wrapped in a message attribute, and the JSON data will be wrapped in a data attribute."]},{"l":"Examples","p":["Here are examples of automatic semi-structured logs detection."]}],[{"l":"CloudWatch Logs","p":["Once you connect your AWS account to Baselime, Baselime automatically create CloudWatch Logs subscription filters to automatically ingest logs from your Lambda functions."]},{"l":"Discovered Keys","p":["Baselime automatically discovers key - value pairs from your AWS Lambdo logs. This empowers you to run complex queries and setup alerts on data that otherwise would be difficult to work with from the AWS Lambda service. For instance, from the discovered keys from the Lambda logs, it's possible to set alerts on the maximum memory used by lambda functions during execution, compared to the amount of memory they are assigned at deployment time."]},{"l":"Lambda Discovered Keys","p":["The Lambda service automatically write logs at the beginning and end of every Lambda function invocation. There logs are parsed as events in Baselime, and keys are automatically discovered from those messages."]},{"l":"START Log Message","p":["The following keys are discovered from the START message:","@type: is always START","@requestId: the request ID of the Lambda invocation","@version: the invoked version of the Lambda function"]},{"l":"END Log Message","p":["The following keys are discovered from the END message:","@type: is always END","@requestId: the request ID of the Lambda invocation"]},{"l":"REPORT Log Message","p":["The following keys are discovered from the REPORT message:","@type: is always REPORT","@requestId: the request ID of the Lambda invocation","@duration: the duration in milliseconds","@billedDuration: the billed duration in milliseconds","@memorySize: the total memory available to the invocation, in MB","@maxMemoryUsed: the max memory used, in MB","@initDuration: the duration of the lambda initialisation in milliseconds (cold starts)","If the Lambda function is instrumented with XRAY, additional keys are discovered:","@xRAYTraceId: the XRAY trace ID","@segmentId: the XRAY segment ID","@sampled: always true"]},{"l":"Timeout Invocations","p":["If your async Lambda invocation times out, Additional keys are automatically discovered:","@timedOut: always true","@timeout: the duration after which the invocation timed-out in seconds","@message: always Task timed out after {@timeout} seconds","@timestamp: the timestamp at the moment the invocation timed out."]},{"i":"consolelog-log-message","l":"console.log Log Message","p":["We recommend writing directly to stdout and stderr from your Lambda functions. For Node.js environments, AWS Lambda uses a modified version of console.log(and other console logging functions) to write to stdout and stderr. These add fields to the log message which are parsed in discovered keys.","@timestamp: the timestamp at the moment the log message was written","@requestId: the request ID of the Lambda invocation","LogLevel: the log level ( INFO, DEBUG, WARN, ERROR)","@message: the message.","If the message in @message is a valid JSON object, Baselime will parse it, otherwise it will be considered a string."]}],[{"l":"Events API","p":["Baselime can ingest your events through our Events API. All requests should be made via HTTPS to events.baselime.io."]},{"l":"Request Format","p":["Each request ingests a batch of events into Baselime. Events are part of the request body. Baselime supports Content-Type application/json.","Requests must be made to the /dataset/namespace route:","dataset is an existing dataset","namespace is created automatically for you when events are received, if it didn't exist beforehand","The request body must be an array of JSON objects. Any element of the array that cannot be parsed as valid JSON will be rejected."]},{"l":"Authentication","p":["The HTTP API requires a valid Baselime API key to be sent in the x-api-key request header.","You can get your API Key using the Baselime CLI."]},{"l":"Validation","p":["The HTTP API validates the provided events and returns a 400 Bad Request status code if any of the events fail validation with a list of all the events that failed validation. If some events pass validation and others fail, we will ingest the events that pass validation. If you encounter a 400 Bad Request error when submitting events to the HTTP API, the events that failed validation will be listed in the body of the request under the invalid key."]},{"l":"High-level requirements","p":["Baselime accepts up to 6MB of uncompressed data per request","Each event must be a properly formatted JSON","Each event must be smaller than 32kb of uncompressed JSON"]},{"l":"Data types","p":["Baselime supports basic data types for the value of each key or nested key of any event:","string","boolean","number"]},{"l":"API Response codes","p":["Baselime returns a 202 response for all valid requests to the HTTP Events API, and a range on of non- 200 responses for errors.","We welcome feeback on API responses and error messages. Reach out to us in our Slack community with any request or suggestion you may have."]},{"l":"Successfull responses","p":["Status Code","Body","Meaning","202","{message: Request Accepted}","All the events were successfully queued for ingestion"]},{"l":"Failure responses","p":["Status Code","Body","Meaning","405","{message: Method Not Allowed}","The HTTP method is now allowed","401","{message: Unauthorised}","Missing or invalid API Key","400","{message: Bad Request}","- Missing or invalid path parameters ( v1, dataset or namespace) - Unable to parse the request body as valid JSON- Empty request body - At least one of the events exceed the 32kb size limit - At least one of the events could not be parsed as valid JSON","500","{message: Internal Error}","An unexpected error occured"]}],[{"l":"CloudTrail Events","p":["Once you connect your AWS account to Baselime, Baselime automatically ingests CloudTrail Events from your AWS environment.","CloudTrail is a managed AWS service which records user activity and API usage across other AWS services. It is useful to debug incidents when the source of the issue is not necessarily application code, but how services communicate with each other. This is particularly relevant for serverless and event-driven applications where significant functionality is taken by cloud infrastructure instead of application code."]},{"l":"CloudTrail management events","p":["CloudTrail events fall into multiple categories, and Baselime automatically ingests CloudTrail management events. Please refer to the complete CloudTrail docs for further details on the CloudTrail concepts."]}],[{"i":"opentelemetry-instrumentation-coming-soon","l":"OpenTelemetry Instrumentation [Coming Soon]","p":["Baselime supports OpenTelemetry to instrument your Lambda functions. [Coming Soon]"]},{"i":"opentelemetry-auto-instrumentation-coming-soon","l":"OpenTelemetry Auto-Instrumentation [Coming Soon]","p":["With OpenTelemetry you can add auto-instrumentation to your Lambda functions. This will collect basic instrumentation to incoming and outgoing requests to your Lambda, as well as Lambda invocations data.","Moreover, Baselime will be able to collect traces across your Lambda invocations.","To auto-instrument your Node.js Lambda function, you need to install the following packages:","Next you need to initialise OpenTelemetry in your Lambda function. Create a tracing.js file that will be executed as the first step of your Lambda invocation.","Deploy your Lambda function using your favourite IaC solution, or in the AWS Console.","In order to instrument the Lambda function, the tracing.js file should be executed before any other file is required in the Lambda handler.","As such, make sure to add the following environment variable to your Lambda:","Alternatively, it should be the first file required at the top of your handler file."]}],[{"l":"Observability as Code Reference","p":["This is the documentation for Baselime's Observability as Code configurations. It is relevant to Baselime CLI and web console users. The Baselime observability as code configurations are defined in YAML files. These files tell Baselime which plugins to install, which resources to create, edit or delete, or what data to fetch.","Generally, the Baselime Observability as Code configuration files will be a .baselime folder in the root directory of a given project. We refer to this folder as .baselime elsewhere in the documentation, although users can rename it at will.","Multiple integrations and connectors with your favourite Infrastructure as Code platforms are currently being developed."]}],[{"l":"Basic Observability as Code","p":["For every application, developers must create a index.yml file in the root of the .baselime folder. This file is used to specify metadata on the application. This can be initialised with the Baselime CLI.","This is an interactive command to initialise the .baselime folder. The command prompts the user for a list of serverless functions that are part of the application being initialised.","Once the .baselime folder has been initialised, Observability as Code configurations can be defined in any YAML file in the .baselime folder or any of its subfolder.","It should be noted that the Baselime CLI reserves a .out folder at the root of the .baselime folder where OaC configurations will be ignored.","The following example shows a simple example of the files present within the .baselime folder."]},{"l":"Observaility as Code","p":["index queries alerts channels charts dashboards"]}],[{"i":"indexyml","l":"index.yml","p":["A list of all the available root properties in mandatory index.yml file in the .baselime folder."]}],[{"l":"Queries","p":["The reference to declaring a query in any YAML file within the .baselime folder."]},{"l":"Query calculations","p":["Each query calculation is a string that can be represented as operator(key)","operator: a computation to be performed the key. For further details, please check the list of accepted operators.","key: the event property to perform the calculation on.","However, the COUNT calculation does not require a key."]},{"l":"Query filters","p":["Each query filter is a string that can be represented as key operation value","key: the event property to filter against.","operation: an operation used to compare the key against the value. For further details, please check the list of accepted operations.","value: the value to compare the key against."]}],[{"l":"Alerts","p":["The reference to declaring an alert in any YAML file within the .baselime folder."]},{"l":"Alert threshold","p":["The alert threshold is a string that can be represented as operation value","operation: an operation used to compare the first results of the query against the value. For further details, please check the list of accepted operations.","value: the value to compare the first result of the query against."]}],[{"l":"Channels","p":["The reference to declaring a channel in any YAML file within the .baselime folder."]}],[{"l":"Charts","p":["The reference to declaring a chart in any YAML file within the .baselime folder."]}],[{"l":"Dashboards","p":["The reference to declaring a chart in any YAML file within the .baselime folder."]}],[{"l":"Baselime CLI Documentation","p":["This is the documentation for the Baselime CLI. It is relevant to anyone working with Baselime's CLI-based workflows; this includes developers who use Baselime CLI by itself, as well as those who use Baselime CLI alongside other Baselime products.","Notably, thid documentation does not cover the specifications of the .baselime folder. For that, see the Observability as Code Documentation."]}],[{"l":"Install"},{"l":"Installation","p":["You can download and install the Baselime CLI on MacOS","You can install the Baselime CLI using Homebrew.","To update:","You can download and install the Baselime CLI for your preferred Linux distribution:","Binary releases are available on GitHub Releases."]},{"l":"Validate installation","p":["In all cases the installation can be validated by running baselime -v in the terminal:"]},{"l":"Login","p":["After creating an account, if you already have a Baselime account, you should log in the Baselime CLI.","Otherwise, you can sign up on the Baselime UI."]}],[{"l":"Basic CLI Features","p":["The command line interface to Baselime is via the baselime command, which accepts a variety of commands and subcommands, such as baselime init or baselime apply. A full list of the supported commands, subcommands is provided in the navigation section of this page.","We refer to the baselime command line tool as the Baselime CLI elsewhere in the documentation.","To view a list of the commands available in your current version of the Baselime CLI, run baselime --help:","(The output from your current Baselime CLI version might differ from the above example).","To get specific help for any specific command, use the --help option with the relevant command. For example baselime apply --help will display the help for the \"apply\" command.","The built-in help describes the most important and relevant characteristics of each command and subcommand. For more details, please refer to each commands section in this documentation."]},{"l":"Common options","p":["--profile: Use a specific profile from your credentials folder","--quiet: Disable console output","--debug: Turn on debug logging","--format: The formating style for the command output.","json","table"]},{"l":"CLI Reference","p":["alerts applications apply auth channels charts dashboards destroy environments events init namespaces plan queries refresh telemetry upgrade validate"]}],[{"l":"Anonymous Telemetry","p":["Baselime collects completely anonymous telemetry data about general CLI usage. Participation in this anonymous program is optional, and you can opt-out if you'd not like to share any information."]},{"i":"how-do-i-opt-out","l":"How do I opt-out?","p":["You can opt out-by running the following command:","You can re-enable telemetry if you'd like to rejoin the program by running."]},{"i":"why-do-we-collect-telemetry-data","l":"Why do we collect telemetry data?","p":["Telemetry data help up to accurately measure the Baselime CLI feature usage, pain points, and customisation across all developers. This data empowers us to build a better product for more developers.","It also allows us to verify if the improvements we make to the Baselime CLI are having a positive impact on the developer experience."]},{"i":"what-is-being-collected","l":"What is being collected?","p":["We measure the following anonymously:","Command invoked (ie. baselime apply, baselime queries run, or baselime events stream)","Version of Baselime in use","General machine information (e.g. number of CPUs, macOS/Windows/Linux, whether or not the command was run within CI)","An example telemetry event looks like:","These events are then sent to an endpoint hosted on our side."]},{"i":"what-about-sensitive-data-or-secrets","l":"What about sensitive data or secrets?","p":["We do not collect any metrics which may contain sensitive data.","This includes, but is not limited to: environment variables, file paths, contents of files, logs, or serialized errors."]},{"i":"will-the-telemetry-data-be-shared","l":"Will the telemetry data be shared?","p":["The data we collect is completely anonymous, not traceable to the source, and only meaningful in aggregate form.","No data we collect is personally identifiable.","In the future, we plan to share relevant data with the community through public dashboards or reports."]}],[{"l":"alerts","p":["The alerts command is used to manage alerts."]},{"l":"list","p":["List all the alerts."]},{"l":"Options","p":["--application: Name of the application"]},{"l":"Examples"},{"i":"example-1-listing-all-alerts","l":"Example 1: Listing all alerts","p":["Command:","Output:"]},{"i":"example-2-listing-all-alerts-for-an-application","l":"Example 2: Listing all alerts for an application","p":["Command:","Output:"]}],[{"l":"applications","p":["The applications command is used to manage applications."]},{"l":"list","p":["List all the applications."]},{"l":"Examples"},{"i":"example-1-listing-all-applications","l":"Example 1: Listing all applications","p":["Command:","Output:"]},{"l":"describe","p":["Return the description of an application."]},{"l":"Options","p":["--name: Name of the application"]},{"i":"examples-1","l":"Examples"},{"i":"example-1-describing-an-application","l":"Example 1: Describing an application","p":["Command:","Output:"]}],[{"l":"apply","p":["Create or update observability configurations"]},{"l":"Options","p":["--config: Baselime configuration folder to execute. Defaults to .baselime"]},{"l":"Examples"},{"i":"example-1-applying-the-default-config-folder","l":"Example 1: Applying the default config folder","p":["Command:","Output:"]},{"i":"example-2-applying-a-configuration-folder","l":"Example 2: Applying a configuration folder","p":["Command:","Output:"]}],[{"l":"alerts","p":["The auth command is used to manage authentication state."]},{"l":"login","p":["Obtain and save credentials for an environment"]},{"l":"Options","p":["--email: Email of the user"]},{"l":"logout","p":["Remove locally-stored credentials for an environment"]},{"l":"Examples"},{"i":"example-1-intercatively-select-the-environment-to-log-out-of","l":"Example 1: Intercatively select the environment to log out of","p":["Command:","Output:","Intercative."]},{"i":"example-2-logout-of-a-specific-environment","l":"Example 2: Logout of a specific environment","p":["Command:","Output:"]}],[{"l":"channels","p":["The channels command is used to manage channels."]},{"l":"list","p":["List all the channels."]},{"l":"Options","p":["--application: Name of the application"]},{"l":"Examples"},{"i":"example-1-listing-all-channels","l":"Example 1: Listing all channels","p":["Command:","Output:"]},{"i":"example-2-listing-all-channels-for-an-application","l":"Example 2: Listing all channels for an application","p":["Command:","Output:"]}],[{"l":"charts","p":["The charts command is used to manage charts."]},{"l":"list","p":["List all the charts."]},{"l":"Options","p":["--application: Name of the application"]},{"l":"Examples"},{"i":"example-1-listing-all-charts","l":"Example 1: Listing all charts","p":["Command:","Output:"]},{"i":"example-2-listing-all-charts-for-an-application","l":"Example 2: Listing all charts for an application","p":["Command:","Output:"]}],[{"l":"dashbaords","p":["The dashbaords command is used to manage dashbaords."]},{"l":"list","p":["List all the dashbaords."]},{"l":"Options","p":["--application: Name of the application"]},{"l":"Examples"},{"i":"example-1-listing-all-dashbaords","l":"Example 1: Listing all dashbaords","p":["Command:","Output:"]},{"i":"example-2-listing-all-dashbaords-for-an-application","l":"Example 2: Listing all dashbaords for an application","p":["Command:","Output:"]}],[{"l":"destroy","p":["Destroy previously-created observability configurations"]},{"l":"Options","p":["--config: Baselime configuration folder to destroy. Defaults to .baselime"]},{"l":"Examples"},{"i":"example-1-destroying-the-default-config-folder","l":"Example 1: Destroying the default config folder","p":["Command:","Output:"]},{"i":"example-2-destroying-a-configuration-folder","l":"Example 2: Destroying a configuration folder","p":["Command:","Output:"]}],[{"l":"environments","p":["The environments command is used to manage environments."]},{"l":"list","p":["List all the environments."]},{"l":"Examples"},{"i":"example-1-listing-all-environments","l":"Example 1: Listing all environments","p":["Command:","Output:"]},{"l":"setup","p":["Setup a new environment."]},{"l":"Options","p":["--type: The type of environment to setup. Currently supports aws","--account: Account number","--region: Region","--alias: An alias for the environment (eg. 'prod')"]},{"i":"examples-1","l":"Examples"},{"i":"example-1-setting-up-an-environment","l":"Example 1: Setting up an environment","p":["Command:","Output:","Intercative."]}],[{"l":"events","p":["The events command is used to manage events."]},{"l":"search","p":["Search for a needle in a dataset."]},{"l":"Options","p":["--from: UTC start time - may also be relative eg: 1h, 20mins","--to: UTC end time - may also be relative eg: 1h, 20mins, now","--dataset: Dataset to search","--namespaces: The namespaces to search; if no namespace is specified all namespaces will be searched; multiple namespaces can be passed","--needle: Needle to search in the dataset"]},{"l":"Examples"},{"i":"example-1-search-for-a-needle-in-a-dataset","l":"Example 1: Search for a needle in a dataset","p":["Command:","Output:"]},{"l":"stream","p":["Stream a dataset."]},{"i":"options-1","l":"Options","p":["--from: UTC start time - may also be relative eg: 1h, 20mins","--to: UTC end time - may also be relative eg: 1h, 20mins, now","--dataset: Dataset to search","--namespaces: The namespaces to search; if no namespace is specified all namespaces will be searched; multiple namespaces can be passed","--follow: Wait for additional data to be appended when the end of streams is reached"]},{"i":"examples-1","l":"Examples"},{"i":"example-1-stream-an-follow-a-dataset","l":"Example 1: Stream an follow a dataset","p":["Command:","Output:"]}],[{"l":"init","p":["The init command is used to initialise your local folder with metadata about your application."]},{"l":"Options","p":["--application: Name of the application","--description: Description of the application","--template: The template to initialise the folder with"]},{"l":"Examples"},{"i":"example-1-interactively-initialise-an-application","l":"Example 1: Interactively initialise an application","p":["Command:","Output:","Intercative."]},{"i":"example-2-initialise-an-application-with-options","l":"Example 2: Initialise an application with options","p":["Command:","Output:"]}],[{"l":"namespaces","p":["The namespaces command is used to manage namespaces."]},{"l":"list","p":["List all the namespaces."]},{"l":"Options","p":["--dataset: Dataset","--from: UTC start time - may also be relative eg: 1h, 20mins","--to: UTC end time - may also be relative eg: 1h, 20mins, now"]},{"l":"Examples"},{"i":"example-1-listing-all-namespaces-for-the-past-2-hours","l":"Example 1: Listing all namespaces for the past 2 hours","p":["Command:","Output:"]}],[{"l":"plan","p":["The baselime plan command creates an execution plan, which lets you preview the changes that Baselime plans to make on your Observability Configurations.","The plan command:","Builds an internal representation of the resources defined in the .baselime folder in your current working directory.","Submits the current resources configuration to the Baselime backend which returns a comparison between the current configuration and the existing resources state.","Proposes a set of change actions that should, if applied, make the remote observability resources match the local configuration.","The plan command alone will not carry out any of the proposed changes to the Baselime backend. It is intended to be used to check if the changes match the expected result before using the baselime apply command.","If you are using Baselime directly in an interactive terminal and you expect to apply the changes Baselime proposes, you can alternatively run baselime apply directly. By default, the apply command automatically generates a new plan and prompts for you to approve it."]},{"l":"Examples","p":["Command:","Output:"]}],[{"l":"queries","p":["The queries command is used to manage queries."]},{"l":"list","p":["List all the queries."]},{"l":"Options","p":["--application: Name of the application"]},{"l":"Examples"},{"i":"example-1-listing-all-queries","l":"Example 1: Listing all queries","p":["Command:","Output:"]},{"i":"example-2-listing-all-queries-for-an-application","l":"Example 2: Listing all queries for an application","p":["Command:","Output:"]},{"l":"run","p":["Run a query."]},{"i":"options-1","l":"Options","p":["--environment: Environment id","--application: Name of the application","--id: Query id","--from: UTC start time - may also be relative eg: 1h, 20mins","--to: UTC end time - may also be relative eg: 1h, 20mins, now"]},{"i":"examples-1","l":"Examples"},{"i":"example-1-run-a-query-passing-its-application-and-id","l":"Example 1: Run a query passing its application and id","p":["Command:","Output:"]}],[{"l":"refresh","p":["The baselime plan command reads the current settongs from the Baselime backend for all observability resources for an application, and updated the local state to match.","The refresh command:","Builds an internal representation of the resources defined in the .baselime folder in your current working directory.","Submits the current resources configuration to the Baselime backend which returns a comparison between the current configuration and the existing resources state.","Proposes a set of change actions that should, if applied, make the local configuration match the remote observability resources.","If there are discrepancies between the remote observability resources and the local configurations, the refresh command will delete the amend the existing files for deleted or updated resources; and will create a new file imported_timestamp with resources which have been created."]},{"l":"Examples","p":["Command:","Output:"]}],[{"l":"telemetry","p":["The telemetry command is used to manage Baselime's telemetry collection."]},{"l":"enable","p":["Enable Baselime's telemetry collection."]},{"l":"Examples","p":["Command:","Output:"]},{"l":"disable","p":["Disable Baselime's telemetry collection."]},{"i":"examples-1","l":"Examples","p":["Command:","Output:"]}],[{"l":"upgrade","p":["Upgrades the Baselime CLI to the latest version"]},{"l":"Examples","p":["Command:","Output:"]}],[{"l":"validate","p":["The baselime validate command vaidates the configuration files in the .baselime in the working directory. The baselime validate command does not access any of the remote resources on the Baselime backend, and validates only the local configuration files.","The baselime validate verifies that the local configuration files are syntactically correct. It should be used for general verification."]},{"l":"Examples","p":["Command:","Output:"]}],[{"l":"Webhook Integration","p":["The Webhook integration enables you and your team to send POST requests to an http endpoint when an alert is triggered.","To set this up, set [channel].properties.type to webhook and a valid URL in the targets array.","When an alert triggers to a webhook channel, HTTP requests are made to the channel targets using the /POST method. Each request carries an event similar to the example outlines below."]}],[{"i":"baselime--slack-integration","l":"Baselime + Slack Integration","p":["The Baselime integration for Slack gives you and your team full visibility into your applications right in Slack channels, where you can get alerted, investigate incidents, and manage your observability, as a team."]}],[{"l":"Authentication","p":["Install the Baselime integraton for Slack.","Once you install the app in your Slack workspace, you can start interacting with Baselime app as a Personal app or access from channels. By default, the Baselime app is enabled in all the public channels. For private channels, you need to explicitly invite /invite @baselime","At this point, your Slack and Baselime user accounts are not linked. You will be prompted to log in Baselime. This is a primary step required to access the app.","Slack welcome message","The primary button will redirect you to the Baselime console where you can login and connect your Slack.","Once this is completed, you will be greeted with a help message \uD83C\uDF89.","Successful login"]}],[{"l":"Automated Alerts","p":["You can set one or multiple Slack channels to receive automated alerts.","Please make sure that the channels defined either are public, or you have manually added the Baselime Slack app to those.","Once configured, When an alert that is configured to send notifications to Slack is triggered, the Baselime Slack app will notify all the configured channels.","Slack alert"]}],[{"l":"Commands","p":["You can use the /baselime command to intercat with Baselime straight from Slack."]},{"l":"queries"},{"l":"run","p":["Run a query.","Options","--application: Name of the application","--ref: Query reference","--from: UTC start time - may also be relative eg: 1h, 20mins","--to: UTC end time - may also be relative eg: 1h, 20mins, now","--id: Query id","Result","Slack queries run result"]},{"l":"list","p":["[Coming Soon]"]},{"l":"help","p":["Displays help."]}],[{"l":"Security Overview","p":["Baselime provides secure service for your telemetry data."]},{"l":"Data Security","p":["All ingested data is deleted after the standard 30-day retention period","All ingested data is encrypted at rest and in transit","All storage nodes, both for backups and live data are not reachable from the public internet","All data transfers, both internal and client facing are encrypted","The Baselime infrastructure follows modern security best practices for accessing data such as separate private VPCs and restrictive IAM roles","You can request data for specific namespaces or specific columns to be deleted"]},{"l":"Connector Security","p":["Baselime connects to your AWS account through CloudFormation, and secure the connection with a unique code."]}],[{"l":"Roles and Permissions","p":["Baselime empowers software engineering teams to gain a deeper understanding of their serverless infrastructure. Team members can collaborate on Baselime, share knowledge and break down silos. We achieve this with the help of user roles.","There are 4 types of user roles in Baselime workspaces, with different permissions.","Workspace owners control billing and all destructive actions on the workspace.","Each workspace can have a single owner, typically the person who created the workspace.","Workspace owner permissions can be transferred.","Workspace admins control billing and all destructive actions on items within the workspace, but cannot delete the workspace itself.","It's possible to have multiple workspace admins within a workspace.","Collaborators are the default role.","They can perform all actions on Baselime, with the exception of destructive actions on private items of other users.","Guests have read-only access to data within Baselime."]}],[{"l":"Data Privacy","p":["You can keep your sensitive data private when working with Baselime. Configure Data Privacy policies to keep your sensitive data private, whilst Baselime collects telemetry data from your serverless stack."]},{"l":"Data Privacy Policies","p":["You can prevent specific data fields from being ingested in Baselime. Either by blocking them entirely, or obfuscating the value stored in Baselime. blocked and obfuscated data fields can be specified across an entire workspace or per namespace."]},{"l":"Blocking Data Fields","p":["Blocked keys will not be stored in Baselime. They will not be available in queries, visualisations or text-search fields.","Data fields can be blocked in the Baselime web console or using the CLI."]},{"l":"Obfuscating Data Fields","p":["Obfuscated keys will be stored in Baselime, but scrambled as a Base64-encoded ASCII from the original data. It should be noted that it is possible to retrieve the value of the obfuscated value.","Data fields can be obfuscated in the Baselime web console or using the CLI"]}],[{"l":"Baselime API","p":["The Baselime CLI allows you to interact with your observability configurations and telemetry data through an HTTP API.","All requests should be sent via HTTPS to go.baselime.io with an API key in the Authorization header.","All request payloads should be sent as JSON."]},{"l":"Reference","p":["Auth API Queries API Query Run API Alerts API Defects API Materialized Keys API Search API"]}],[{"l":"API Keys","p":["Every programmatic request sent to Baselime must contain an API key. API keys are used to securely communicate with Baselime."]},{"l":"Managing API Keys","p":["API keys can be generated and revoked using the CLI, the API or in the Web Console. Only workspace owners and admins can create or revoke API keys.","API keys work across all namespaces in a workspace. API keys are not linked to users."]},{"l":"Permissions","p":["API keys can have different permissions that govern access to Baselime resources. By default API keys start with no permissions. In other words, API keys can do nothing in Baselime until you grant them the appropriate permissions.","The API key permissions are as follows:","alerts: can create and manage alerts","applications: can create and manage applications","dashboards: can create and manage dashboards","defects: can create and manage defects","environments: can create and manage environments","events: can send events to Baselime","queries: can create, run and manage queries"]}],[{"l":"Auth API","p":["The auth API is used to validate an authentication key and to verify the actions it's allowed to perform on Baselime."]},{"l":"Verify API Key"},{"l":"Request"},{"l":"Sample Response","p":["The expected response is:"]}],[{"l":"Queries API","p":["The queries API is used to create and manage queries."]},{"l":"Create Query"},{"l":"Request","p":["The payload to create a query should follow the specs below. All fields are optional:","namespaces: a list of namespaces to run the query against","keys: a list of objects representing the fields to retrieve, Each key consists of a key(the name of the key to retrieve) and its type.","calculations: a list of calculations to perform on the events. Calculations consist of a key and operator. If the operator is COUNT, a key is not necessary. calculations and keys cannot be used simultaneously.","filters: a list of objects representing the filters to apply to the query. Each filter consists of a key, an operation and a value. The value could be:","a literal value","another key/ type pair; the key can be a materialized key","filter_combination: AND or OR. If the list of filters contains multiple filters, filter_combination defines how they are applied.","AND: find events matching all filters","OR: find events matching any filter","group_bys: a list of key/ type pairs to group your result by.","orders: a list of objects describing how to order the query results. Each item should include a key, a type and a order which takes either ASCENDING or DESCENDING","name: the name of the query","description: a description of the query","Sample request:"]},{"l":"Sample Response"},{"l":"Get Query"},{"i":"request-1","l":"Request","p":["To retrieve a query, send a GET request to /v1/queries/query_id."]},{"i":"sample-response-1","l":"Sample Response"},{"l":"Update Query"},{"i":"request-2","l":"Request","p":["To update a query, send a PUT request to /v1/queries/query_id. The request body should include all fields that you wish to edit on the query. Only included fields will be updated."]},{"i":"sample-response-2","l":"Sample Response"},{"l":"Delete Query"},{"i":"request-3","l":"Request","p":["To delete a query, send a DELETE request to /v1/queries/query_id. If other resources such as alerts use the current query, the delete operation will fail and respond with status code 403."]},{"i":"sample-response-3","l":"Sample Response"},{"l":"List Queries"},{"i":"request-4","l":"Request","p":["To list queries, send a GET request to /v1/queries/."]},{"i":"sample-response-4","l":"Sample Response"}],[{"l":"Query Run API","p":["The query run API is used to run queries on Baselime.","Running a query on Baselime is asynchronous. You submit a query run request, and the API responds with a receipt. You can subsequently poll the query run API to retrieve the query run result."]},{"l":"Important Considerations","p":["Query results cannot exceed 6MB in size. Pagination is available for queries that exceed 6MB in size.","Query results cannot take more than 10 seconds to run.","Creating a query run is rate limited at 10 requests per minute per workspace."]},{"l":"Create Query Run"},{"l":"Request","p":["The payload to create a query run should follow the specs below.","query_id: the id of the query to run","from: the datetime UNIX timestamp (with milliseconds) of the start time of the query run","to: the datetime UNIX timestamp (with milliseconds) of the end time of the query run","limit[optional]: the maximum number of query results","offset[optional]: the number of query results to skip","Sample request:"]},{"l":"Sample Response"},{"l":"Get Query Run"},{"i":"request-1","l":"Request","p":["To retrieve a query run, send a GET request to /v1/query_run/query_run_id."]},{"i":"sample-response-1","l":"Sample Response"}],[{"l":"Alerts API","p":["The alerts API is used to create and manage alerts."]},{"l":"Create Alert"},{"l":"Request","p":["The payload to create an alert should follow the specs below.","query_id: the ID of the query to use to for the alert. The query must contain exactly one calculation.","threshold: an object describing the threshold to compare with the calculation defined in the query. it consists of an operation and a value.","frequency: the interval in seconds, between consecutive checks of the query calculation.","destinations: a list describing the sinks to the receive the alert when triggered. Each sink is an object with a type and a target.","name: the name of the alert","description: a description of the alert","Sample request:"]},{"l":"Sample Response"},{"l":"Get Alert"},{"i":"request-1","l":"Request","p":["To retrieve an alert, send a GET request to /v1/alerts/alert_id."]},{"i":"sample-response-1","l":"Sample Response"},{"l":"Update Alert"},{"i":"request-2","l":"Request","p":["To update an alert, send a PUT request to /v1/alerts/alert_id. The request body should include all fields that you wish to edit on the alert. Only included fields will be updated."]},{"i":"sample-response-2","l":"Sample Response"},{"l":"Delete Alert"},{"i":"request-3","l":"Request","p":["To delete an alert, send a DELETE request to /v1/alerts/alert_id."]},{"i":"sample-response-3","l":"Sample Response"},{"l":"List Alerts"},{"i":"request-4","l":"Request","p":["To list alerts, send a GET request to /v1/alerts/."]},{"i":"sample-response-4","l":"Sample Response"}],[{"l":"Defects API","p":["The defects API is used to create and manage defects."]},{"l":"Create Defect"},{"l":"Request","p":["The payload to create a defect should follow the specs below.","target: an object describing the entity to flag as a defect. Each target should contain:","type: the type of the target, EVENT for a single event and TRACE for a entire trace.","id: the id of the target.","priority: the priority of the defect, LOW, MEDIUM, HIGH, URGENT.","severity: the severity of the defect, MINOR, MAJOR, CRITICAL, FATAL.","name: the name of the alert","description: a description of the alert","Creating a defect via the API will trigger downstream events, such as notifications to relevant team-members and creating tickets in linked project management software.","Sample request:"]},{"l":"Sample Response"},{"l":"Get Defect"},{"i":"request-1","l":"Request","p":["To retrieve a defect, send a GET request to /v1/defects/defect_id."]},{"i":"sample-response-1","l":"Sample Response"},{"l":"Update Defect"},{"i":"request-2","l":"Request","p":["To update an defect, send a PUT request to /v1/defects/defect_id. The request body should include all fields that you wish to edit on the defect. Only included fields will be updated.","It is not possible to update the target of a defect."]},{"i":"sample-response-2","l":"Sample Response"},{"l":"Delete Defect"},{"i":"request-3","l":"Request","p":["To delete an defect, send a DELETE request to /v1/defects/defect_id."]},{"i":"sample-response-3","l":"Sample Response"},{"l":"List Defects"},{"i":"request-4","l":"Request","p":["To list defects, send a GET request to /v1/defects/.","Filter only resolved or active defects with a query parameter to the request: /v1/defects?resolved=true"]},{"i":"sample-response-4","l":"Sample Response"}],[{"l":"Materialized Keys API","p":["The Materialized Keys API is used to create and manage materialized keys."]},{"l":"Create Materialized Key"},{"l":"Request","p":["The payload to create a materialized key should follow the specs below.","alias: a string representing the materialized_key. An alias can only consist of alpha-numerical characters.","expression: the calculation for the materialized_key. Please make sure to follow the specs.","description: a description of the materialized key","Sample request:"]},{"l":"Sample Response"},{"l":"Get Materialized Key"},{"i":"request-1","l":"Request","p":["To retrieve a materialized key, send a GET request to /v1/materialized_key/materialized_key_id."]},{"i":"sample-response-1","l":"Sample Response"},{"l":"Get Materialized Key by Alias"},{"i":"request-2","l":"Request","p":["To retrieve a materialized key, send a GET request to /v1/materialized_key?alias=materialized_alias."]},{"i":"sample-response-2","l":"Sample Response"},{"l":"Update Materialized Key"},{"i":"request-3","l":"Request","p":["To update an materialized key, send a PUT request to /v1/materialized_key/materialized_key_id. The request body should include all fields that you wish to edit on the materialized key. Only included fields will be updated."]},{"i":"sample-response-3","l":"Sample Response"},{"l":"Delete Materialized Keys"},{"i":"request-4","l":"Request","p":["To delete an materialized key, send a DELETE request to /v1/materialized_key_id/materialized_key_id.","It is not possible to delete materialized keys that are being used by other queries"]},{"i":"sample-response-4","l":"Sample Response"},{"l":"List Materialized Key"},{"i":"request-5","l":"Request","p":["To list materialized key, send a GET request to /v1/materialized_key/."]},{"i":"sample-response-5","l":"Sample Response"}],[{"l":"Search API","p":["The search API is used to search through your events on Baselime.","Searching for a terms in your events on Baselime is asynchronous. You submit a search request, and the API responds with a receipt. You can subsequently poll the search API to retrieve the search result."]},{"l":"Important Considerations","p":["Search results cannot exceed 6MB in size. Pagination is available for search requests that exceed 6MB in size.","Search results cannot take more than 10 seconds to run.","Creating a search request is rate limited at 10 requests per minute per workspace."]},{"l":"Create Search"},{"l":"Request","p":["The payload to create a search should follow the specs below.","term: the term to search through the events","namespaces: a list of namespaces to search across. Each namespace must contain a type and a value.","from: the datetime UNIX timestamp (with milliseconds) of the start time of the search","to: the datetime UNIX timestamp (with milliseconds) of the end time of the search","limit[optional]: the maximum number of search results","offset[optional]: the number of search results to skip","Sample request:"]},{"l":"Sample Response"},{"l":"Get Search"},{"i":"request-1","l":"Request","p":["To retrieve a query run, send a GET request to /v1/search/search_id."]},{"i":"sample-response-1","l":"Sample Response"}],[{"l":"Overview","p":["Baselime uses connctors to automatically ingest telemetry data from your cloud environments."]}],[{"l":"Baselime AWS Connector","p":["The Baselime AWS Connector helps your team automatically:","ingest AWS Lambda logs from CloudWatch","ingest AWS CloudTrail logs for your infrastructure","ingest performace metrics from: [Coming soon]","AWS Lamda functions","DynamoDB tables","SQS queues","EventBridge buses","SNS topics","other serverless services"]},{"l":"Setup","p":["The connector is an automated flow based on a CloudFormation template that can be defined using a simple wizard.","It can be done using the Baselime CLI or throught the web console."]},{"l":"Using the CLI","p":["To connect a cloud account to Baselime using the CLI, run the following command in your terminal","Once you've followed the interactive steps, the CLI will generate a CloudFormation template for you to deploy on your AWS account. Deploy the temple on your AWS account. Once deployed, login in your newly connected environment from the CLI.","The interactive output should list your newly connected environment.","Within minutes you should get telemetry data flowing through with the command"]},{"l":"Using the Web Console","p":["Navigate to the Baselime web console and login.","Follow the steps on the homescreen to connect a new AWS Account. Baselime will generate a CloudFormation template for you to deploy on your AWS account.","Once the template is deployed on AWS, return to the Baselime web console and refresh the page. You should see the newly connected AWS environment in the list of connected environment.","Within minutes telemtry data from your AWS environment should start displaying in the events streams in the Baselime web console."]},{"l":"Troubleshooting","p":["If you encounter any issers or error when connecting your AWS environment, please don't hesitate to contact us, or join our Slack community where we are always available to support."]},{"l":"CloudFormation Template","p":["The CloudFormation template is open-source and available here."]}],[{"l":"Materialized Keys","p":["Materialized keys are the result of calculations on one or multiple existing keys in your events."]},{"l":"Reference","p":["Materialized keys work a lot like Excel functions. A materialized_key consists of:","one or multiple existing key s or materialized_key s prefixed with $. Example: $@duration","a function. Example: MIN to compute the minimum between two values","numbers: Example: 32","Materialized keys can only take existing key s of type number.","Example materialized_key: LESS(PLUS($@duration, $@initDuration), 100). This will return true for every event where the sum of the @duration and @initDuration is less than 100."]},{"l":"List of operators"},{"l":"Comparison operators","p":["LESS: less than","LESSOREQUALS: less than or equal","GREATER: greater than","GREATEROREQUALS: greater than or equal","EQUALS: equal","NOTEQUALS: not equal"]},{"l":"Math operators","p":["MIN: minimum","MAX: maximum","PLUS: sum","MINUS: subtract","MULTIPLY: multiply","DIVIDE: divide","MODULO: modulo"]}],[{"l":"Accepted Operations and Operators","p":["Operations and Operators are key concepts when creating queries on Baselime.","Operations: an operation is used to compare two or more key s and/or value s","Operators: an operator is used to perform a computation on key s or value s"]},{"l":"Operations","p":["The accepted operations are:","=","!=","INCLUDES","[Coming soon]","STARTS_WITH","ENDS_WITH","EMPTY"]},{"l":"Operators","p":["AVG","COUNT","MAX","MEDIAN","MIN","P001","P01","P05","P10","P25","P75","P90","P95","P99","P999","SUM","The accepted operators are:"]}]]